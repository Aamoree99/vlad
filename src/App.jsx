import { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [score, setScore] = useState(0);
  const [coinsPerClick, setCoinsPerClick] = useState(1);
  const [clickMultiplier, setClickMultiplier] = useState(1);
  const [expanded, setExpanded] = useState(false);
  const [upgrades, setUpgrades] = useState([
    { emoji: "üëÜ", description: "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∑–∞ –∫–ª–∏–∫", level: 0, cost: 10 },
    { emoji: "‚ú®", description: "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–Ω–µ—Ç –∑–∞ –∫–ª–∏–∫", level: 0, cost: 100 },
    { emoji: "‚è±Ô∏è", description: "–ê–≤—Ç–æ–∫–ª–∏–∫, –º–µ–¥–ª–µ–Ω–Ω—ã–π", level: 0, cost: 50 },
    { emoji: "üöÄ", description: "–ê–≤—Ç–æ–∫–ª–∏–∫, —Å—Ä–µ–¥–Ω–∏–π", level: 0, cost: 200 },
    { emoji: "üåü", description: "–ê–≤—Ç–æ–∫–ª–∏–∫, –±—ã—Å—Ç—Ä—ã–π", level: 0, cost: 500 },
    { emoji: "üí©", description: "–ü–æ—Ä–∞–¥–æ–≤–∞—Ç—å –í–ª–∞–¥–∏–∫–∞", level: 0, cost: 10000 }
  ]);
  const [autoCoins, setAutoCoins] = useState([0, 0, 0]); // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–∫–ª–∏–∫–∞

  useEffect(() => {
    const interval = setInterval(() => {
      const autoGain = autoCoins.reduce((sum, ac) => sum + ac, 0);
      setScore(score => score + autoGain);
    }, 1000);
    return () => clearInterval(interval);
  }, [autoCoins]);

  const handleClick = () => {
    setScore(prevScore => prevScore + coinsPerClick * clickMultiplier);
  };

  const handleToggleSize = () => {
    setExpanded(!expanded);
  };

  const triggerEmojiAttack = () => {
    const totalDuration = 10000; // –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    const emojiFrequency = 10; // –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    const target = document.querySelector('.App-logo'); // –¶–µ–ª—å –∞—Ç–∞–∫–∏
  
    const targetRect = target.getBoundingClientRect(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–ª–∏
  
    // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è –ª–æ–≥–æ
    target.style.animation = "spin 1s linear infinite";
  
    const interval = setInterval(() => {
      const emoji = document.createElement("div");
      emoji.textContent = "üí©"; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —ç–º–æ–¥–∑–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
      emoji.style.position = "absolute";
      emoji.style.left = `${Math.random() * window.innerWidth}px`;
      emoji.style.top = `${Math.random() * window.innerHeight}px`;
      emoji.style.transition = "all 0.5s"; // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
      document.body.appendChild(emoji);
  
      setTimeout(() => {
        emoji.style.left = `${targetRect.left + targetRect.width / 2}px`; // –¶–µ–Ω—Ç—Ä —Ü–µ–ª–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        emoji.style.top = `${targetRect.top + targetRect.height / 2}px`; // –¶–µ–Ω—Ç—Ä —Ü–µ–ª–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      }, 10);
  
      setTimeout(() => {
        document.body.removeChild(emoji);
      }, 500); // –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
    }, emojiFrequency);
  
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤—Ä–∞—â–µ–Ω–∏—é –ª–æ–≥–æ
    setTimeout(() => {
      clearInterval(interval);
      target.style.animation = "spin 20s linear infinite"; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è
    }, totalDuration);
  };
  
  

  const handleUpgrade = (index) => {
    const newUpgrades = [...upgrades];
    const newAutoCoins = [...autoCoins];
    if (newUpgrades[index].level < 20 && score >= newUpgrades[index].cost) {
      setScore(prevScore => prevScore - newUpgrades[index].cost);
      newUpgrades[index].level += 1;
      newUpgrades[index].cost = Math.ceil(newUpgrades[index].cost * (index === 1 ? 1.2 : 1.1));
      setUpgrades(newUpgrades);

      if (index === 0) {
        setCoinsPerClick(prev => prev + 1);
      } else if (index === 1) {
        setClickMultiplier(prev => prev * 1.05);
      } else if (index > 1) {
        newAutoCoins[index - 2] = newAutoCoins[index - 2] + 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
        setAutoCoins(newAutoCoins);
      } else if (index === 5) { 
        triggerEmojiAttack();
      } 
    }
  };

  return (
    <div className={`App ${expanded ? 'expanded' : ''}`}>
      <p>–ú–æ–Ω–µ—Ç—ã: {score}</p>
      <img src="vldf.png" className="App-logo" alt="logo" onClick={triggerEmojiAttack} />
      {expanded && (
        <div className="slider">
          {upgrades.map((upgrade, i) => (
            <div className="slide" key={i} onClick={() => handleUpgrade(i)}>
              <div className="emoji">{upgrade.emoji}</div>
              <div className="description">{upgrade.description}</div>
              <div className="level">–£—Ä–æ–≤–µ–Ω—å: {upgrade.level}</div>
              <div className="cost">–¶–µ–Ω–∞: {upgrade.cost}</div>
            </div>
          ))}
        </div>
      )}
      <button onClick={handleToggleSize} className="toggle-size">
        {expanded ? '‚Üì' : '‚Üë'}
      </button>
    </div>
  );
}

export default App;
